/**
 * generated by Xtext 2.12.0
 */
package com.coffee.tests;

import com.coffee.hlvl.Model;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * Class to test the correct parsing of HLVL
 * @author Angela Villota
 * @version HLVL V4
 * November 2018
 */
@RunWith(XtextRunner.class)
@InjectWith(HlvlInjectorProvider.class)
@SuppressWarnings("all")
public class HlvlParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  @Extension
  private ParseHelper _parseHelper;
  
  /**
   * Method to test the interpretation of an empty program
   */
  @Test
  public void emptyModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      final String model = _builder.toString();
      final Model empty = this.parseHelper.parse(model);
      Assert.assertNotNull(empty);
      Assert.assertTrue(empty.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void elements() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model eShop");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean connectionType");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("symbolic customerType variants: [\'sporadic\' , \'regular\'] comment: {\"What is the customer type?\"}");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("//instantiable [1,5] boolean  appServer");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("//instantiable [2,10] boolean serverMachines");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("att integer confidentiality variants: 1..5");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("att integer confidentialityBounded is 2");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("integer notAtt variants:[2, 4, 8]  ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("relations:");
      _builder.newLine();
      final String program = _builder.toString();
      final Model model = this.parseHelper.parse(program);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void common() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model commonM");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("boolean A");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("boolean B");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("r1: common(A,B)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void mutex() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model mutexM");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean creditCard");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean giftCard");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean insecureConnection");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("symbolic customerType variants: [\'sporadic\' , \'regular\'] comment: {\"What is the customer type?\"}");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("m1: mutex(creditCard, insecureConnection)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("m2: mutex((customerType=\'sporadic\'),[giftCard,creditCard]) ");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void implies() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model implication");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean payPal");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean secureConnection");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean customerProfile");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("symbolic customerType variants: [\'sporadic\' , \'regular\'] ");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t ");
      _builder.append("comment: {\"What is the customer type?\"}");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("imp1: implies(payPal, secureConnection)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("imp2: implies((customerType=\'regular\'), [secureConnection,customerProfile])");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void decomposition() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model testDecomposition");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean card");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean creditCard");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean giftCard");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean debitCard");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean payPal");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("att integer confidentiality variants: 1..5");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("att integer confidentialityBounded is 2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("att integer certificateType variants: 1..5");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("dc1: decomposition(card, [giftCard, debitCard], [0,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("dc2: decomposition(card, [creditCard], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("att1:decomposition(payPal,[confidentiality,certificateType], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("att2:decomposition(card,[confidentiality,certificateType], [1,1])");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void group() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model testGroup");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("  \t");
      _builder.append("boolean payment");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean payPal");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean card");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("g1: group(payment, [payPal, card], [1,*])");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void visibility() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model testVisibility");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("  \t");
      _builder.append("boolean payment");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean payPal");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean card");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("v1: visibility(productType = \'services\', [VR1, VR2])");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void expressions() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model testExpressions");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("att integer confidentiality variants: 1..5");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("att integer confidentialityBounded is 2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("att integer certificateType variants: 1..5");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("exp1: expression(3 <= card.confidentiality AND ");
      _builder.newLine();
      _builder.append("\t\t                               ");
      _builder.append("card.confidentiality <= 5)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * to print the parsing errors
   */
  public void printErrors(final Model model) {
    boolean _isEmpty = model.eResource().getErrors().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<Resource.Diagnostic> _errors = model.eResource().getErrors();
      for (final Resource.Diagnostic element : _errors) {
        InputOutput.<String>println(element.getMessage());
      }
    }
  }
}
