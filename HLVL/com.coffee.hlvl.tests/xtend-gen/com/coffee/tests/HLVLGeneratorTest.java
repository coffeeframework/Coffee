/**
 * generated by Xtext 2.12.0
 */
package com.coffee.tests;

import com.coffee.generator.Dialect;
import com.coffee.generator.HlvlGenerator;
import com.coffee.generator.IHLVLParser;
import com.coffee.generator.ParserFactory;
import com.coffee.hlvl.Model;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * Class to test the correct parsing of HLVL
 * @author Angela Villota
 * @version HLVL V4
 * November 2018
 */
@RunWith(XtextRunner.class)
@InjectWith(HlvlInjectorProvider.class)
@SuppressWarnings("all")
public class HLVLGeneratorTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void getDialect() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("boolean A");
      _builder.newLine();
      _builder.append("boolean B");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("r1: common(A,B)");
      _builder.newLine();
      final String basicProgram = _builder.toString();
      Model model = this.parseHelper.parse(basicProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      HlvlGenerator gen = new HlvlGenerator();
      gen.findDialect(model);
      Assert.assertEquals(Dialect.BASIC_BOOL, gen.findDialect(model));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("model empty");
      _builder_1.newLine();
      _builder_1.append("elements:");
      _builder_1.newLine();
      _builder_1.append("boolean A");
      _builder_1.newLine();
      _builder_1.append("att boolean B");
      _builder_1.newLine();
      _builder_1.append("relations:");
      _builder_1.newLine();
      _builder_1.append("r1: common(A,B)");
      _builder_1.newLine();
      final String attProgram = _builder_1.toString();
      model = this.parseHelper.parse(attProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      HlvlGenerator _hlvlGenerator = new HlvlGenerator();
      gen = _hlvlGenerator;
      gen.findDialect(model);
      Assert.assertEquals(Dialect.ATTRIBUTE, gen.findDialect(model));
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("model empty");
      _builder_2.newLine();
      _builder_2.append("elements:");
      _builder_2.newLine();
      _builder_2.append("boolean A");
      _builder_2.newLine();
      _builder_2.append("boolean B");
      _builder_2.newLine();
      _builder_2.append("relations:");
      _builder_2.newLine();
      _builder_2.append("r1: decomposition(A, [B], [1,4])");
      _builder_2.newLine();
      final String multProgram = _builder_2.toString();
      model = this.parseHelper.parse(multProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      HlvlGenerator _hlvlGenerator_1 = new HlvlGenerator();
      gen = _hlvlGenerator_1;
      gen.findDialect(model);
      Assert.assertEquals(Dialect.MULTIPLICITY, gen.findDialect(model));
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("model empty");
      _builder_3.newLine();
      _builder_3.append("elements:");
      _builder_3.newLine();
      _builder_3.append("boolean A");
      _builder_3.newLine();
      _builder_3.append("boolean B");
      _builder_3.newLine();
      _builder_3.append("att integer C variants: 1..5");
      _builder_3.newLine();
      _builder_3.append("relations:");
      _builder_3.newLine();
      _builder_3.append("r1: decomposition(A, [B], [1,4])");
      _builder_3.newLine();
      final String attMultProgram = _builder_3.toString();
      model = this.parseHelper.parse(attMultProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      HlvlGenerator _hlvlGenerator_2 = new HlvlGenerator();
      gen = _hlvlGenerator_2;
      gen.findDialect(model);
      Assert.assertEquals(Dialect.MULTIPLICITY, gen.findDialect(model));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void boolParser() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("boolean A");
      _builder.newLine();
      _builder.append("boolean B");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("r1: common(A,B)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var bool : A ;");
      _builder_1.newLine();
      _builder_1.append("var bool : B ;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint A == true ;");
      _builder_1.newLine();
      _builder_1.append("constraint B == true ;");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      final IHLVLParser parser = ParserFactory.getParser(Dialect.BASIC_BOOL, model.getName());
      final CharSequence actual = parser.parseModel(model);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void complexBoolParser() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model empty");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("boolean A");
      _builder.newLine();
      _builder.append("boolean B");
      _builder.newLine();
      _builder.append("boolean C");
      _builder.newLine();
      _builder.append("boolean D");
      _builder.newLine();
      _builder.append("boolean F");
      _builder.newLine();
      _builder.append("boolean G");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("r1: common(A,B)");
      _builder.newLine();
      _builder.append("r2: implies((A = B), [C, D])");
      _builder.newLine();
      _builder.append("r3: mutex((C OR D), [F,G])");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var bool : A ;");
      _builder_1.newLine();
      _builder_1.append("var bool : B ;");
      _builder_1.newLine();
      _builder_1.append("var bool : C ;");
      _builder_1.newLine();
      _builder_1.append("var bool : D ;");
      _builder_1.newLine();
      _builder_1.append("var bool : F ;");
      _builder_1.newLine();
      _builder_1.append("var bool : G ;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint A == true ;");
      _builder_1.newLine();
      _builder_1.append("constraint B == true ;");
      _builder_1.newLine();
      _builder_1.append("constraint (A == B) -> C;");
      _builder_1.newLine();
      _builder_1.append("constraint (A == B) -> D;");
      _builder_1.newLine();
      _builder_1.append("constraint not((C \\/ D) /\\ F);");
      _builder_1.newLine();
      _builder_1.append("constraint not((C \\/ D) /\\ G);");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      final IHLVLParser parser = ParserFactory.getParser(Dialect.COMPLEX_BOOL, model.getName());
      final CharSequence actual = parser.parseModel(model);
      InputOutput.<CharSequence>println(actual);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void gplBasicBooleanTest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model GPL");
      _builder.newLine();
      _builder.append("elements:  ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean GPL ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Gtp ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean directed");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean undirected");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean weighted");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean unweighted");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean BFS");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean DFS");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Algorithms");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean connected");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean stronglyc");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean cycle");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean mstprim");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean mstkruskal");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean shortest");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R1: common(GPL)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R2: decomposition(GPL,[Weight, Search], [0,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R3: decomposition(GPL, [Gtp, Algorithms], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R3X: group(Gtp, [directed, undirected], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R4: group(Weight, [weighted, unweighted], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R5: group(Search, [BFS, DFS], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R6: group(Algorithms, [connected, stronglyc, cycle, mstprim, mstkruskal, shortest], [1,*])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R7: implies(mstprim, unweighted)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R8: mutex(stronglyc, shortest)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R9: expression(undirected OR ~mstprim)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R10: expression(directed OR ~shortest)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R11: expression( ~mstprim OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R12: expression( unweighted OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R13: expression( undirected OR ~stronglyc )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R14: expression( ~connected OR ~stronglyc )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R15: expression( Search OR ~connected )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R16: expression( undirected OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R17: expression( ~mstkruskal OR ~shortest )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R18: expression( DFS OR ~cycle )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R19: expression( ~mstprim OR ~shortest)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      final HlvlGenerator gen = new HlvlGenerator();
      final IHLVLParser parser = ParserFactory.getParser(gen.findDialect(model), model.getName());
      final CharSequence actual = parser.parseModel(model);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var bool : GPL ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Gtp ;");
      _builder_1.newLine();
      _builder_1.append("var bool : directed ;");
      _builder_1.newLine();
      _builder_1.append("var bool : undirected ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Weight ;");
      _builder_1.newLine();
      _builder_1.append("var bool : weighted ;");
      _builder_1.newLine();
      _builder_1.append("var bool : unweighted ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Search ;");
      _builder_1.newLine();
      _builder_1.append("var bool : BFS ;");
      _builder_1.newLine();
      _builder_1.append("var bool : DFS ;");
      _builder_1.newLine();
      _builder_1.append("var bool : Algorithms ;");
      _builder_1.newLine();
      _builder_1.append("var bool : connected ;");
      _builder_1.newLine();
      _builder_1.append("var bool : stronglyc ;");
      _builder_1.newLine();
      _builder_1.append("var bool : cycle ;");
      _builder_1.newLine();
      _builder_1.append("var bool : mstprim ;");
      _builder_1.newLine();
      _builder_1.append("var bool : mstkruskal ;");
      _builder_1.newLine();
      _builder_1.append("var bool : shortest ;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint GPL == true ;");
      _builder_1.newLine();
      _builder_1.append("constraint Weight -> GPL ;");
      _builder_1.newLine();
      _builder_1.append("constraint Search -> GPL ;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL <-> Gtp ;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL <-> Algorithms ;");
      _builder_1.newLine();
      _builder_1.append("constraint directed <-> (not(undirected) /\\ Gtp) ;");
      _builder_1.newLine();
      _builder_1.append("constraint undirected <-> (not(directed) /\\ Gtp) ;");
      _builder_1.newLine();
      _builder_1.append("constraint weighted <-> (not(unweighted) /\\ Weight) ;");
      _builder_1.newLine();
      _builder_1.append("constraint unweighted <-> (not(weighted) /\\ Weight) ;");
      _builder_1.newLine();
      _builder_1.append("constraint BFS <-> (not(DFS) /\\ Search) ;");
      _builder_1.newLine();
      _builder_1.append("constraint DFS <-> (not(BFS) /\\ Search) ;");
      _builder_1.newLine();
      _builder_1.append("constraint Algorithms <-> ( connected \\/ stronglyc \\/ cycle \\/ mstprim \\/ mstkruskal \\/ shortest ) ;");
      _builder_1.newLine();
      _builder_1.append("constraint mstprim -> unweighted ;");
      _builder_1.newLine();
      _builder_1.append("constraint not (stronglyc /\\ shortest);");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected \\/ not(mstprim));");
      _builder_1.newLine();
      _builder_1.append("constraint (directed \\/ not(shortest));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstprim) \\/ not(mstkruskal));");
      _builder_1.newLine();
      _builder_1.append("constraint (unweighted \\/ not(mstkruskal));");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected \\/ not(stronglyc));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(connected) \\/ not(stronglyc));");
      _builder_1.newLine();
      _builder_1.append("constraint (Search \\/ not(connected));");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected \\/ not(mstkruskal));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstkruskal) \\/ not(shortest));");
      _builder_1.newLine();
      _builder_1.append("constraint (DFS \\/ not(cycle));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstprim) \\/ not(shortest));");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void gplBasicIntegerParser() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model GPL");
      _builder.newLine();
      _builder.append("elements:  ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean GPL ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Gtp ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean directed");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean undirected");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Weight");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean weighted");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean unweighted");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Search");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean BFS");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean DFS");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean Algorithms");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean connected");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean stronglyc");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean cycle");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean mstprim");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean mstkruskal");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean shortest");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R1: common(GPL)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R2: decomposition(GPL,[Weight, Search], [0,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R3: decomposition(GPL, [Gtp, Algorithms], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R3X: group(Gtp, [directed, undirected], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R4: group(Weight, [weighted, unweighted], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R5: group(Search, [BFS, DFS], [1,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R6: group(Algorithms, [connected, stronglyc, cycle, mstprim, mstkruskal, shortest], [1,*])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R7: implies(mstprim, unweighted)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R8: mutex(stronglyc, shortest)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R9: expression(undirected OR ~mstprim)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R10: expression(directed OR ~shortest)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("R11: expression( ~mstprim OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R12: expression( unweighted OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R13: expression( undirected OR ~stronglyc )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R14: expression( ~connected OR ~stronglyc )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R15: expression( Search OR ~connected )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R16: expression( undirected OR ~mstkruskal )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R17: expression( ~mstkruskal OR ~shortest )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R18: expression( DFS OR ~cycle )");
      _builder.newLine();
      _builder.append(" \t");
      _builder.append("R19: expression( ~mstprim OR ~shortest)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("var 0..1: GPL;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: Gtp;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: directed;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: undirected;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: Weight;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: weighted;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: unweighted;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: Search;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: BFS;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: DFS;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: Algorithms;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: connected;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: stronglyc;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: cycle;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: mstprim;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: mstkruskal;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: shortest;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint GPL == 1;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL >= Weight;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL >= Search;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL == Gtp;");
      _builder_1.newLine();
      _builder_1.append("constraint GPL == Algorithms;");
      _builder_1.newLine();
      _builder_1.append("constraint Gtp <= directed + undirected ;");
      _builder_1.newLine();
      _builder_1.append("constraint directed + undirected  <= Gtp;");
      _builder_1.newLine();
      _builder_1.append("constraint Weight <= weighted + unweighted ;");
      _builder_1.newLine();
      _builder_1.append("constraint weighted + unweighted  <= Weight;");
      _builder_1.newLine();
      _builder_1.append("constraint Search <= BFS + DFS ;");
      _builder_1.newLine();
      _builder_1.append("constraint BFS + DFS  <= Search;");
      _builder_1.newLine();
      _builder_1.append("constraint Algorithms <= connected + stronglyc + cycle + mstprim + mstkruskal + shortest ;");
      _builder_1.newLine();
      _builder_1.append("constraint connected + stronglyc + cycle + mstprim + mstkruskal + shortest  <= 6 * Algorithms;");
      _builder_1.newLine();
      _builder_1.append("constraint mstprim <= unweighted;");
      _builder_1.newLine();
      _builder_1.append("constraint stronglyc + shortest <= 1 ;");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected > 0 \\/ not(mstprim > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (directed > 0 \\/ not(shortest > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstprim > 0) \\/ not(mstkruskal > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (unweighted > 0 \\/ not(mstkruskal > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected > 0 \\/ not(stronglyc > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(connected > 0) \\/ not(stronglyc > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (Search > 0 \\/ not(connected > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (undirected > 0 \\/ not(mstkruskal > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstkruskal > 0) \\/ not(shortest > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (DFS > 0 \\/ not(cycle > 0));");
      _builder_1.newLine();
      _builder_1.append("constraint (not(mstprim > 0) \\/ not(shortest > 0));");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      final IHLVLParser parser = ParserFactory.getParser(Dialect.BASIC_INT, model.getName());
      final CharSequence actual = parser.parseModel(model);
      InputOutput.<CharSequence>println(actual);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void OVMModelMODEVAR() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model RFW");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("symbolic VP1 ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("variants: [\'medium-class car\', \'upper-class car\', \'small truck\', \'big truck\'] ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("comment:{\"Type of vehicle\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("symbolic VP2 ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("variants: [\'switchable\', \'durable\'] ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("comment:{\"Activation\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean  VP3 comment:{\"Comfort functions\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean  v7 comment:{\"Non stopping warning\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean  v8 comment:{\"Overspeed warning\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean  VP4 comment:{\"Other signs\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean  v41 comment:{\"Road w/right of way start\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean  v42 comment:{\"city limit\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean  VP5 comment:{\"Prohibition signs\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean  V51 comment:{\"No vehicles\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean  V52 comment:{\"No cars\"}");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("r1: common(VP1, VP2, VP3)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("d1: decomposition(VP5, [V51, V52], [0,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("d2: decomposition(VP4, [v41, v42], [0,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("d3: decomposition(VP3, [v7, v8], [0,1])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("exp1: expression(VP1 =\'big truck\' => VP2 =\'durable\')");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("imp1: implies((VP1 =\'medium-class car\'), [V51,V52])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("imp2: implies(v8, v42)");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("% Mapping  variants to integers");
      _builder_1.newLine();
      _builder_1.append("var {1 , 2 , 3 , 4 }  : VP1;");
      _builder_1.newLine();
      _builder_1.append("% Map: medium-class car -> 1,  upper-class car -> 2,  small truck -> 3,  big truck -> 4,  ");
      _builder_1.newLine();
      _builder_1.append("% Mapping  variants to integers");
      _builder_1.newLine();
      _builder_1.append("var {1 , 2 }  : VP2;");
      _builder_1.newLine();
      _builder_1.append("% Map: switchable -> 1,  durable -> 2,  ");
      _builder_1.newLine();
      _builder_1.append("var 0..1: VP3;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: v7;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: v8;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: VP4;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: v41;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: v42;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: VP5;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: V51;");
      _builder_1.newLine();
      _builder_1.append("var 0..1: V52;");
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.append("constraint VP1 == 1;");
      _builder_1.newLine();
      _builder_1.append("constraint VP2 == 1;");
      _builder_1.newLine();
      _builder_1.append("constraint VP3 == 1;");
      _builder_1.newLine();
      _builder_1.append("constraint VP5 >= V51;");
      _builder_1.newLine();
      _builder_1.append("constraint VP5 >= V52;");
      _builder_1.newLine();
      _builder_1.append("constraint VP4 >= v41;");
      _builder_1.newLine();
      _builder_1.append("constraint VP4 >= v42;");
      _builder_1.newLine();
      _builder_1.append("constraint VP3 >= v7;");
      _builder_1.newLine();
      _builder_1.append("constraint VP3 >= v8;");
      _builder_1.newLine();
      _builder_1.append("constraint ((VP1 == 4)  -> (VP2 == 2));");
      _builder_1.newLine();
      _builder_1.append("constraint (VP1 == 1) -> V51;");
      _builder_1.newLine();
      _builder_1.append("constraint (VP1 == 1) -> V52;");
      _builder_1.newLine();
      _builder_1.append("constraint v8 <= v42;");
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      HlvlGenerator gen = new HlvlGenerator();
      gen.findDialect(model);
      Assert.assertEquals(Dialect.ATTRIBUTE, gen.findDialect(model));
      final IHLVLParser parser = ParserFactory.getParser(gen.findDialect(model), model.getName());
      final CharSequence actual = parser.parseModel(model);
      InputOutput.<CharSequence>println(actual);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void doplerMODEVAR() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model Dopler");
      _builder.newLine();
      _builder.append("elements:");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("symbolic scope variants: [\'assemble yourself\', \'complete suite\']");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("comment: {\"What to buy?\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean glossary comment:{\"Include glossary?\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("symbolic resolution variants:[\'800x600\', \'\']");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t");
      _builder.append("comment:{\"Default resolution?\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("integer width comment:{\"Width?\"}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean tools");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean configurationWizard");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean decisionKing");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("boolean projectKing");
      _builder.newLine();
      _builder.append("relations:");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("c1: common(tools)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("g1: group(tools, [configurationWizard, decisionKing, projectKing], [1,3])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("val1: expression(width >= 800 AND width <= 1680)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("e1: expression(resolution=\'800x600\' => width = 800)   ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("vis1: visibility(configurationWizard=true, [resolution])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("vis2: visibility(entailed(scope), [glossary])");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("vis3: visibility(scope=\'assemble yourself\', [glossary])");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("% Map: switchable -> 1,  durable -> 2,  ");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      HlvlGenerator gen = new HlvlGenerator();
      gen.findDialect(model);
      Assert.assertEquals(Dialect.ATTRIBUTE, gen.findDialect(model));
      final IHLVLParser parser = ParserFactory.getParser(gen.findDialect(model), model.getName());
      final CharSequence actual = parser.parseModel(model);
      InputOutput.<CharSequence>println(actual);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void fmMODEVAR() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("model eShop ");
      _builder.newLine();
      _builder.append("elements: ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean connectionType");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean secureConnection ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean insecureConnection ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean payment ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean payPal ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("symbolic customerType variants: [ \'sporadic\' , \'regular\' ] ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("comment: { \"This element represents the customer type\" } ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("att integer confidentiality variants: 1 .. 5 ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("att integer confBounded is 2 ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean customerProfile ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean SMS ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean card ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean creditCard ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean giftCard boolean debitCard ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean implementation ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean appServer ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("boolean machines ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("att integer certificateType variants: 1 .. 5 ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("symbolic productType variants: [ \'services\' , \'products\' ] ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("relations: ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("com1 : common ( customerType , payment ) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("//constraint expressions");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("exp1 : expression ( 3 <= card . confidentiality AND card . confidentiality <= 5 ) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("//mutex");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("m1 : mutex (creditCard , insecureConnection) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("m2 : mutex ((customerType = \'sporadic\') ,[giftCard , creditCard]) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("//implications ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("imp1 : implies (payPal , secureConnection) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("imp2 : implies ((customerType = \'regular\'), [secureConnection, customerProfile])");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("//decompositions");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("dc1 : decomposition (card, [giftCard ,debitCard] ,[0 , 1]) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("dc2 : decomposition (card, [creditCard] ,[1 , 1]) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("dc3 : decomposition (implementation ,[appServer] ,[1 , 5]) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("dc4 : decomposition (implementation ,[machines] ,[2 , 10]) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("att1 : decomposition (payPal , [confidentiality ,certificateType] ,[ 1 , 1]) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("att3 : decomposition (card , [confidentiality ,certificateType] ,[ 1 , 1 ]) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("//groups");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("g1 : group (payment ,[payPal ,card] ,[1 ,*]) ");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("//visibility");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("v1 : visibility (productType = \'services\' ,[implementation ,appServer ,machines])");
      _builder.newLine();
      final String hlvlProgram = _builder.toString();
      final Model model = this.parseHelper.parse(hlvlProgram);
      Assert.assertNotNull(model);
      this.printErrors(model);
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      Assert.assertTrue(model.eResource().getErrors().isEmpty());
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("% Autogenerated code form the Coffee framework");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("% Author: avillota");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("% Variables from elements definitions ");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("% Map: switchable -> 1,  durable -> 2,  ");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("% Variables and constraints from the variability relations definition");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("% The solving parameters from the parameters files");
      _builder_1.newLine();
      final String expected = _builder_1.toString();
      HlvlGenerator gen = new HlvlGenerator();
      gen.findDialect(model);
      Assert.assertEquals(Dialect.MULTIPLICITY, gen.findDialect(model));
      final IHLVLParser parser = ParserFactory.getParser(gen.findDialect(model), model.getName());
      final CharSequence actual = parser.parseModel(model);
      InputOutput.<CharSequence>println(actual);
      Assert.assertEquals(expected.toString(), actual.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * to print the parsing errors
   */
  public void printErrors(final Model model) {
    boolean _isEmpty = model.eResource().getErrors().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<Resource.Diagnostic> _errors = model.eResource().getErrors();
      for (final Resource.Diagnostic element : _errors) {
        InputOutput.<String>println(element.getMessage());
      }
    }
  }
}
